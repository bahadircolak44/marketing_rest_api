from rest_framework.decorators import action

from api import config, models
from api.facebook.serializers import GenericModelSerializer
from utils.viewset import GenericViewSet


class FacebookAPIViewSet(GenericViewSet):
    """
    This class is used by every models. GenericViewSet provides retrieve, list and create methods.
    Logics are defined in models, thus this class can be used as meta. All URLs and Views generated by this class.
    """
    serializer_class = GenericModelSerializer

    def __init__(self, *args, **kwargs):
        basename = kwargs.get('basename')
        attribute = config.__dict__.get(basename.upper())
        db_model = getattr(models, attribute.get('db'))
        self.db_model = db_model
        self.attribute = attribute
        self.basename = basename
        self.queryset = db_model.objects.all()
        self.pagination_class = None

        super().__init__(**kwargs)

    def get_serializer(self, *args, **kwargs):
        """
        To use GenericSerializer, we need correct data to be provided.
        Thus, we need to overwrite get_serializer func.
        """
        serializer_class = self.get_serializer_class()
        kwargs.setdefault('context', self.get_serializer_context())
        fields = self.attribute.get('FIELD_LIST')
        read_only_fields = self.attribute.get('READ_ONLY_FIELD_LIST')
        extra_fields = self.attribute.get('EXTRA_FIELDS')
        return serializer_class(model=self.db_model, fields=fields, read_only_fields=read_only_fields,
                                extra_fields=extra_fields, *args, **kwargs)

    def perform_create(self, serializer):
        """
        Every model has create_api. So we have defined in the models.
        In this way there is no logic in views. Anyone can use create_api via Models.
        """

        serializer.save()
        instance = serializer.instance
        return instance.create_api()

    @action(methods=['GET'], detail=False, url_path='insights', url_name='insights')
    def insights(self, *args, **kwargs):
        return self.db_model.insights()

    @action(methods=['GET'], detail=False, url_path='preview', url_name='preview')
    def preview(self, *args, **kwargs):
        return self.db_model.preview()
